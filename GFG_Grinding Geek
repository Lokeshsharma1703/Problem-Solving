GeeksforGeeks has introduced a special offer where you can enroll in any course, and if you manage to complete 90% of the course within 90 days, you will receive a refund of 90%.

Geek was fascinated by this offer. This offer was valid for only n days, and each day a new course was available for purchase. Geek decided that if he bought a course on some day, he will complete that course on the same day itself and redeem floor[90% of cost of the course] amount back. Find the maximum number of courses that Geek can complete in those n days if he had total amount initially.

Note: On any day, Geek can only buy the new course that was made available for purchase that day.

Example 1:

Input:
n = 2
total = 10
cost = [10, 9]
Output: 2
Explanation: 
Geek can buy the first course for 10 amount, 
complete it on the same date and redeem 9 back. 
Next, he can buy and complete the 2nd course too.
Example 2:

Input:
n = 11
total = 10
cost = [10, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Output: 10
Explanation: 
Geek can buy and complete all the courses that cost 1.
Your Task:
This is a function problem. The input is already taken care of by the driver code. You only need to complete the function max_courses() that takes N the number of days, the total amount, and the cost array as input argument and return the maximum amount of courses that could be purchased.

Expected Time Complexity: O(n*total)
Expected Auxiliary Space: O(n*total)

Constraints:
1 <= n <= 1000
0 <= total <= 1000
1 <= cost[i] <= 1000


link - https://www.geeksforgeeks.org/problems/grinding-geek/1

-------------------------------------------------------------------------------------------------------------------------------

class Solution {
    public int maxcost(int ind,int total,int cost[],int dp[][]){
        if(ind==cost.length){
            return 0;
        }
        if(dp[ind][total]!=-1)return dp[ind][total];
        int notpick=maxcost(ind+1,total,cost,dp);
        int pick=Integer.MIN_VALUE;
        if(cost[ind]<=total){ 
            int val=total-cost[ind]+(int)(Math.floor(0.9*cost[ind]));
            pick=1+maxcost(ind+1,val,cost,dp);
        }
        return dp[ind][total]=Math.max(notpick,pick);
    }
    public int max_courses(int n, int total, int[] cost) {
        int dp[][]=new int[n][total+1];
        for(int i=0;i<n;i++){
            for(int j=0;j<total+1;j++){
                dp[i][j]=-1;
            }
        }
        return maxcost(0,total,cost,dp);
    }
}
